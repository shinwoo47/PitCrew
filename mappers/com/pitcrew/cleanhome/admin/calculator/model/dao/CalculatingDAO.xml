<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper	namespace="CalculatingDAO">
		
	<resultMap type="com.pitcrew.cleanhome.admin.calculator.model.dto.CalSettingDTO" id="CalSettingResultMap">
	<id property="reqNo" column="REQ_NO"/>
	<result property="reqDate" column="REQ_DATE"/>
	<result property="cleanerPrice" column="DEDUCTPRICE"/>
	<association property="cleaner" resultMap="memberMapForCleaner"/>
	</resultMap>
	
	<resultMap type="com.pitcrew.cleanhome.admin.member.model.dto.MemberDTO" id="memberMapForCleaner">
		<id property="memNo" column="MEM_NO"/>
		<result property="name" column="MEM_NAME"/>
		<result property="id" column="MEM_ID"/>
		<result property="enrollDate" column="ENROLL_DATE"/>
		<result property="address" column="ADDRESS"/>
		<result property="phone" column="PHONE"/>
		<result property="role" column="MEMBER_ROLE"/>
	</resultMap>

	<resultMap type="com.pitcrew.cleanhome.admin.member.model.dto.MemberDTO" id="memberMapForUser">
		<id property="memNo" column="MEM_NO"/>
		<result property="name" column="USER_NAME"/>
		<result property="id" column="MEM_ID"/>
		<result property="address" column="USER_ADDRESS"/>
		<result property="phone" column="USER_PHONE"/>
		<result property="role" column="MEMBER_ROLE"/>
	</resultMap>

	<resultMap type="com.pitcrew.cleanhome.admin.pay.model.dto.PayDTO" id="payResultMap">
			<id property="payNo" column="PAY_NO"/>
			<result property="card" column="PAY_CARD"/>
			<result property="price" column="PAY_PRICE"/>
			<result property="payDate" column="PAY_DATE"/>
			<result property="approvedNo" column="PAY_APPROVAL_NO"/>
			<result property="reqNo" column="REQ_NO"/>
	</resultMap>
	
	<resultMap type="com.pitcrew.cleanhome.admin.calculator.model.dto.DeductRateDTO" id="deductRateResultMap">
		<id property="deductNo" column="DEDUCT_NO"/>
		<result property="deductName" column="DEDUCT_NAME"/>
		<result property="rate" column="DEDUCT_RATE"/>
	</resultMap>	
	
	
	<resultMap type="com.pitcrew.cleanhome.admin.calculator.model.dto.CalculatingDTO" id="calculatingResultMap">
		<id property="calNo" column="CAL_NO"/>
		<result property="cleanerTransferPrice" column="CAL_TRANSFER_PRICE"/>
		<result property="calDate" column="CAL_DATE"/>
		<result property="incometax" column="INCOME_TAX"/>
		<result property="residenttax" column="RESIDENT_TAX"/>
		
	</resultMap>
	
	
	<resultMap type="com.pitcrew.cleanhome.admin.calculator.model.dto.CalculatingDTO" id="calculatingResultMap2">
		<association property="cleaner" resultMap="memberMapForCleaner"/>
		<association property="request" resultMap="requestResultMap"/>
	</resultMap>
	
	<resultMap type="com.pitcrew.cleanhome.admin.request.model.dto.RequestDTO" id="requestResultMap">
		<id property="reqNo" column="REQ_NO"/>
		<result property="serviceDate" column="REQ_DATE"/>
		<result property="cleanerIncome" column="DEDUCTPRICE"/>
	</resultMap>
		
	<resultMap type="com.pitcrew.cleanhome.admin.calculator.model.dto.CalculatingDTO" id="calResultMap">
		<id property="calNo" column="CAL_NO"/>
		<association property="cleaner" resultMap="memberMapForCleaner"/>
	</resultMap>
	
	<select id="selectCalCheck"  resultMap="CalSettingResultMap">
	    SELECT A.REQ_NO
	      FROM REQUEST_SET_PERIOD A
	</select>
	
	<select id="selectCalSetting" resultMap="calculatingResultMap2">
	     SELECT  
	          D.RNUM 		
		    , D.REQ_NO
		    , D.REQ_DATE
		    , D.DEDUCTPRICE
		    , D.MEM_NO
			, D.MEM_NAME
		    , D.MEM_ID
			, D.ENROLL_DATE 
		 FROM (SELECT  ROWNUM RNUM 		
					 , C.REQ_NO
					 , C.REQ_DATE
					 , C.DEDUCTPRICE
					 , C.MEM_NO
					 , C.MEM_NAME
					 , C.MEM_ID
					 , C.ENROLL_DATE
				  FROM (SELECT A.REQ_NO
					         , A.REQ_DATE
						     , A.DEDUCTPRICE
					         , B.MEM_NO
					         , B.MEM_NAME
					         , B.MEM_ID
					         , B.ENROLL_DATE
					      FROM REQUEST_INFO A
					      JOIN MEMBER B ON (A.MEM_NO_CLEANER = B.MEM_NO)
					    <where>
					    	   B.MEMBER_ROLE = '해결사'
					       AND A.REQ_STATUS = '완료'	
					       AND A.REQ_NO NOT IN (SELECT A1.REQ_NO FROM REQUEST_SET_PERIOD A1)
					     <if test="searchCondition == 'cleanerId'">
						       AND B.MEM_ID = #{ searchValue } 	
						 </if>
						 <if test="searchCondition == 'cleanerName'">
						       AND B.MEM_NAME = #{ searchValue } 	
						 </if>
					     <if test='(searchStartDate != null and !"".equals(searchStartDate)) 
													or (searchEndDate != null and !"".equals(searchEndDate)) '>
							   AND  A.REQ_DATE BETWEEN TO_DATE(#{ searchStartDate }, 'YYYY-MM-DD')
					    		    AND TO_DATE(#{ searchEndDate }, 'YYYY-MM-DD') + 1             
						 </if>
					    </where>
					    ORDER BY A.REQ_DATE DESC
					    ) C
				       <![CDATA[
		          WHERE ROWNUM <= #{ endRow }
		          ]]>
		        ) D
          WHERE D.RNUM >= #{ startRow } 
	</select>

	<select id="selectdeductRate" resultMap="deductRateResultMap">
		SELECT
		      A.DEDUCT_NO
		    , A.DEDUCT_NAME
		    , A.DEDUCT_RATE
	      FROM SET_DEDUCT_RATE A
	     WHERE A.DEDUCT_NAME = 'incometax'	
	</select>

	
	<select id="selectCalNum"  resultMap="calResultMap">
	    SELECT A.REQ_NO
	    	 , A.CAL_NO	
	      FROM SET_HISTORY A
	     WHERE A.CAL_DATE = SYSDATE 
	</select>
	


	<select id="selectCalcNum" resultType="_int">
      SELECT
             LAST_NUMBER
   		FROM USER_SEQUENCES
 	   WHERE SEQUENCE_NAME = 'SEQ_REQUEST_SET_PERIOD'   
   </select>

   <insert id="insertCal">
        INSERT /* */
          INTO SET_HISTORY A
        (
          A.CAL_NO
        , A.MEM_NO
        , A.CAL_PRICE
        , A.CAL_TRANSFER_PRICE
        , A.CAL_DATE
        , A.INCOME_TAX
        , A.RESIDENT_TAX
        )
        VALUES
        (
          SEQ_SET_HISTORY.NEXTVAL
        , #{ cleanerNo }
        , #{ cleanerIncome }
        , #{ cleanerTransferPrice }
        , SYSDATE
        , #{ incometax }
        , #{ residenttax }
        )
	</insert>
	
	<insert id="insertReqNum">
        INSERT /* */
          INTO SET_HISTORY A
        (
          A.CAL_NO
        , A.MEM_NO
        , A.CAL_PRICE
        , A.CAL_TRANSFER_PRICE
        , A.CAL_DATE
        , A.INCOME_TAX
        , A.RESIDENT_TAX
        )
        VALUES
        (
          SEQ_SET_HISTORY
        , #{ memNo }
        , #{ calcPrice }
        , #{ transferPrice }
        , SYSDATE
        , #{ transferPrice }
        , #{ residentTax }
        )
	</insert>

	<insert id="insertStatus">
        INSERT /* */
          INTO SET_STATUS_HISTORY A
        (
          A.CAL_CON_CHANGE_NO
        , A.CAL_NO
        , A.CAL_CON_CHANGE_DATE
        , A.CAL_CON_CHANGE
        )
        VALUES
        (
          SEQ_SET_STATUS_HISTORY.NEXTVAL
        , #{ calNo }
        , SYSDATE
        , '정산대기'
        )
	</insert>

	<select id="selectAllCount" resultType="_int" parameterType="hashmap">
		SELECT /* */
               COUNT(*)
        FROM REQUEST_INFO A
	     JOIN MEMBER B ON (A.MEM_NO_CLEANER = B.MEM_NO)
	    <where>
	    	B.MEMBER_ROLE = '해결사'
	    AND A.REQ_STATUS = '완료'	
	    AND A.REQ_NO NOT IN (SELECT A1.REQ_NO FROM REQUEST_SET_PERIOD A1)
	     <if test="searchCondition == 'cleanerId'">
		       AND B.MEM_ID = #{ searchValue } 	
		 </if>
		 <if test="searchCondition == 'cleanerName'">
		       AND B.MEM_NAME = #{ searchValue } 	
		 </if>
	     <if test='(searchStartDate != null and !"".equals(searchStartDate)) 
									or (searchEndDate != null and !"".equals(searchEndDate)) '>
			     AND  A.REQ_DATE BETWEEN TO_DATE(#{ searchStartDate }, 'YYYY-MM-DD')
	    			   AND TO_DATE(#{ searchEndDate }, 'YYYY-MM-DD') + 1             
		 </if>
	    </where> 
		</select>
		
		<select id="selectCalList" resultMap="calculatingResultMap">
     	   	   SELECT A.RNUM
		            , A.CAL_NO
			        , A.MEM_NO
			        , A.MEM_ID
			        , A.MEM_NAME
			        , A.ENROLL_DATE
			        , A.CAL_DATE
			        , A.CAL_PRICE
			        , A.INCOME_TAX
			        , A.RESIDENT_TAX
			        , A.CAL_TRANSFER_PRICE
			        , A.CAL_CON_CHANGE
				FROM  (SELECT ROWNUM RNUM
					        , B.CAL_NO
			                , B.MEM_NO
			                , B.MEM_ID
			                , B.MEM_NAME
			                , B.ENROLL_DATE
			                , B.CAL_DATE
			                , B.CAL_PRICE
			                , B.INCOME_TAX
			                , B.RESIDENT_TAX
			                , B.CAL_TRANSFER_PRICE
			                , B.CAL_CON_CHANGE
 				 	    FROM  (SELECT C.CAL_NO
					          		, C.MEM_NO
					          	    , D.MEM_ID
						            , D.MEM_NAME
						            , D.ENROLL_DATE
						            , C.CAL_DATE
						            , C.CAL_PRICE
						            , C.INCOME_TAX
						            , C.RESIDENT_TAX
						            , C.CAL_TRANSFER_PRICE
						            , F.CAL_CON_CHANGE
						         FROM SET_HISTORY C
						         JOIN MEMBER D ON(D.MEM_NO = C.MEM_NO)
						  	     JOIN REQUEST_INFO E ON (E.MEM_NO_CLEANER = C.MEM_NO)
							     JOIN SET_STATUS_HISTORY F ON(F.CAL_NO = C.CAL_NO)
						   	   <where>
						    		  D.MEMBER_ROLE = '해결사' 	
								<if test="searchCondition=='cleanerId'">
							          D.MEM_NO = #{ searchValue }
								</if>
								<if test="searchCondition == 'cleanerName'">
						    	      D.MEM_NAME = #{ searchValue }  
								</if>
								<if test='(searchStartDate != null and !"".equals(searchStartDate)) 
														or (searchEndDate != null and !"".equals(searchEndDate)) '>
								      E.REQ_DATE BETWEEN TO_DATE(#{ searchStartDate }, 'YYYY-MM-DD')
						    						 AND TO_DATE(#{ searchEndDate }, 'YYYY-MM-DD') + 1             
								</if>
								<if test="searchStatusValue != null and !''.equals(searchStatusValue)">
							          F.CAL_CON_CHANGE LIKE '%' || #{ searchStatusValue } || '%' 	
								</if>
						    	</where>
						        ORDER BY C.CAL_PRICE DESC
						    	) B
	    					  <![CDATA[
	                  WHERE ROWNUM <= #{ endRow }
	                  ]]>
	               ) A
    		   WHERE A.RNUM >= #{ startRow }			  	  	 			
		</select>
	

</mapper>